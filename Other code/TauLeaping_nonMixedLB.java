import java.util.Arrays ;
import java.io.* ;

// Tau-leaping algorithm to simulate LB-growth in wells and migration with rate D between wells.



public class TauLeaping_nonMixedLB{

    static final int num_experiments = 1;

    static final double timestep = 0.0001 ;
    static final int numsteps = 50000 ;

    static final long K = 1000000L ;
    static int n_init = 100;

    static final double D = 0.05 ;




    public static int getPoissonRV( double lambda ){
        double l = Math.exp( -lambda ) ;
        double p = 1.0 ;  int k = 0 ;
        do{
            k++ ;
            p = p * Math.random() ;
        } while ( p > l ) ;
        return k-1 ;
    }




    public static double getGrowthRate( double NK, double[] NK_array, double[] LB_rates ){
    // Method to estimate growth rate at specific N/K from Bartek's experimental data
        double g = -9;
        int entry = 0;
        for( int i=0; i<NK_array.length; i++ ){
            if( NK_array[i] > NK ){
                entry = i;
                i = NK_array.length * 2 ;
            }
        }
        if( NK == 0 ){ g = 2; }
        else if( NK >= 1 ){ g = 0; }
        else{
            g = (LB_rates[entry] + LB_rates[entry-1]) / 2.0 ;
        }
        if( g < 0 ){ System.out.println("g<0: ERROR"); System.exit(0); }
        return g;
    }





    public static void main(String args[])throws IOException{


    PrintWriter out = new PrintWriter( new FileWriter("Ntot.dat")  ) ;


    // LB-growth birth rate data ===================================================
double[] NKs = {0.0, 0.0058823529411764705, 0.011764705882352941, 0.01764705882352941, 0.023529411764705882, 0.029411764705882356, 0.03529411764705883, 0.041176470588235294, 0.047058823529411764, 0.052941176470588235, 0.058823529411764705, 0.06470588235294118, 0.07058823529411765, 0.07647058823529412, 0.0823529411764706, 0.08823529411764708, 0.09411764705882353, 0.1, 0.10588235294117648, 0.11176470588235295, 0.11764705882352942, 0.1235294117647059, 0.12941176470588237, 0.13529411764705884, 0.14117647058823532, 0.14705882352941177, 0.15294117647058825, 0.15882352941176472, 0.1647058823529412, 0.17058823529411768, 0.17647058823529413, 0.1823529411764706, 0.18823529411764706, 0.19411764705882353, 0.2, 0.2058823529411765, 0.21176470588235297, 0.21764705882352942, 0.2235294117647059, 0.22941176470588237, 0.23529411764705885, 0.24117647058823533, 0.2470588235294118, 0.2529411764705882, 0.25882352941176473, 0.2647058823529412, 0.2705882352941177, 0.27647058823529413, 0.28235294117647064, 0.2882352941176471, 0.29411764705882354, 0.3, 0.3058823529411765, 0.31176470588235294, 0.31764705882352945, 0.3235294117647059, 0.3294117647058824, 0.33529411764705885, 0.34117647058823536, 0.34705882352941175, 0.35294117647058826, 0.3588235294117647, 0.3647058823529412, 0.37058823529411766, 0.3764705882352941, 0.3823529411764706, 0.38823529411764707, 0.3941176470588236, 0.4, 0.4058823529411765, 0.411764705882353, 0.4176470588235295, 0.4235294117647059, 0.4294117647058824, 0.43529411764705883, 0.4411764705882353, 0.4470588235294118, 0.45294117647058824, 0.45882352941176474, 0.4647058823529412, 0.4705882352941177, 0.47647058823529415, 0.48235294117647065, 0.4882352941176471, 0.4941176470588236, 0.5, 0.5058823529411764, 0.511764705882353, 0.5176470588235295, 0.5235294117647059, 0.5294117647058824, 0.5352941176470588, 0.5411764705882354, 0.5470588235294118, 0.5529411764705883, 0.5588235294117647, 0.5647058823529413, 0.5705882352941176, 0.5764705882352942, 0.5823529411764706, 0.5882352941176471, 0.5941176470588235, 0.6, 0.6058823529411765, 0.611764705882353, 0.6176470588235294, 0.6235294117647059, 0.6294117647058824, 0.6352941176470589, 0.6411764705882353, 0.6470588235294118, 0.6529411764705884, 0.6588235294117648, 0.6647058823529413, 0.6705882352941177, 0.6764705882352943, 0.6823529411764707, 0.6882352941176471, 0.6941176470588235, 0.7, 0.7058823529411765, 0.711764705882353, 0.7176470588235294, 0.7235294117647059, 0.7294117647058824, 0.7352941176470589, 0.7411764705882353, 0.7470588235294118, 0.7529411764705882, 0.7588235294117648, 0.7647058823529412, 1.0};



double[] LB_growth_rates = {2.0, 1.4515383528820198, 1.3268456392990229, 1.2460908592325395, 1.1846451596215506, 1.134283973750877, 1.0911905551573338, 1.0532647233941137, 1.0192207364737311, 0.9882112281288045, 0.9596466297437259, 0.9330993012989593, 0.9082486451646022, 0.8848477738334221, 0.8627022830879314, 0.8416561953338396, 0.8215823409458175, 0.8023755902452877, 0.7839479753985176, 0.7662251000781128, 0.7491434478301104, 0.732648330996518, 0.7166923048293633, 0.7012339251501226, 0.6862367635732859, 0.6716686184846697, 0.6575008766551941, 0.6437079920911613, 0.6302670570802816, 0.6171574464378226, 0.6043605203866059, 0.5918593747889519, 0.5796386299112848, 0.5676842507675355, 0.5559833935142047, 0.5445242734708579, 0.5332960511964979, 0.5222887337240966, 0.5114930885863537, 0.5009005686879714, 0.49050324641787374, 0.48029375566719057, 0.4702652406396036, 0.46041131052055717, 0.4507259992192211, 0.44120372951843595, 0.4318392810682613, 0.42262776174216915, 0.41356458194455936, 0.4046454315166416, 0.3958662589368562, 0.3872232525534866, 0.3787128236223371, 0.37033159095227813, 0.3620763669870753, 0.3539441451738354, 0.3459320884872817, 0.3380375189953642, 0.33025790836581714, 0.3225908692255455, 0.3150341472954447, 0.3075856142326207, 0.3002432611202417, 0.2930051925525486, 0.2858696212690258, 0.2788348632975086, 0.27189933357120677, 0.2650615419892983, 0.25832008989503097, 0.2516736669491774, 0.245121048380296, 0.23866109259666474, 0.2322927391478957, 0.22601500702730692, 0.21982699330902147, 0.2137278721165939, 0.20771689392275633, 0.20179338518257317, 0.1959567483050643, 0.190206461971, 0.18454208180734244, 0.17896324143143022, 0.17346965388069063, 0.16806111344620409, 0.16273749793085315, 0.15749877135495985, 0.1523449871340351, 0.14727629175442222, 0.14229292897283247, 0.1373952445647053, 0.1325836916434338, 0.127858836566989, 0.12322136543960888, 0.11867209120243125, 0.11421196128692858, 0.10984206577647826, 0.10556364598170644, 0.10137810328118886, 0.09728700800635194, 0.09329210805319035, 0.08939533677799223, 0.08559881957299086, 0.08190487831467703, 0.07831603262609003, 0.07483499659181396, 0.07146466921154675, 0.06820811648543784, 0.0650685426155766, 0.062049247428196244, 0.059153566843654026, 0.056384793155643355, 0.05374607217598019, 0.051240275138533097, 0.0488698448281974, 0.046636617864559866, 0.044541628470238084, 0.042584903227772364, 0.04076526081233089, 0.03908013467394313, 0.03752543905436482, 0.03609549843832685, 0.03478305676227284, 0.03357937537289606, 0.032474418764680796, 0.03145711635618678, 0.0305156792519155, 0.02963794507643564, 0.028811722645465793, 0.028025111338640003, 0.027266776402217897, 0.02652616933704952, 0.0};
    //=========================================================================================================
  



    int nwells = 1;  



    for( int exp=0; exp<num_experiments; exp++ ){

        long[] populations = new long[nwells];
        populations[0] = n_init ;

        double t = 0;

        // Print initial condition
        System.out.print( t );
        for( int w=0; w<nwells; w++ ){ System.out.print(" " + populations[w]); }
        System.out.println() ;


        for( int steps=0; steps<numsteps; steps++ ){  //Tau-leaping algorithm

            // Arrays to hold propensities
            double[] D_left = new double[nwells] ;    //Move to left well
            double[] D_right = new double[nwells] ;   //Move to right well
            double[] B_props = new double[nwells] ;   //Replicate in well
    
            for( int w=0; w<nwells; w++){
    
                long N = populations[w] ;
                double wellNK = (double)N/(double)K ;
                double g = getGrowthRate( wellNK, NKs, LB_growth_rates ) ;
    
                // Set propensities
                if( w == 0 && nwells==1 ){
                    B_props[0] = populations[0]*g ;
                }
                else if( w == 0 ){
                    D_left[0] = 0 ;
                    D_right[0] = D * populations[0]  ;
                    B_props[0] = populations[0]*g ;
                }
                else if( w == nwells - 1 ){
                    D_left[nwells-1] =  D * populations[ nwells-1 ] ;
                    D_right[nwells-1] = 0 ;
                    B_props[nwells-1] = populations[nwells-1]*g ; 
                }
                else{
                    D_left[w]  = D * populations[w] ;
                    D_right[w] = D * populations[w] ;
                    B_props[w] = populations[w]*g ;
                } 
            }
    
    
    
            // Calculate Poisson RVs and update populations -- can I use Normal distribution for increased speed??
            for (int w=0; w<nwells; w++ ){
    
                int r1 = getPoissonRV( timestep * D_left[w]   ) ; //move left
                int r2 = getPoissonRV( timestep * D_right[w]  ) ; //move right
                int r3 = getPoissonRV( timestep * B_props[w]  ) ; //birth
    
                populations[w] = populations[w] - r1 - r2 + r3 ;
                if( w> 0 ){
                    populations[w-1] = populations[w-1] + r1 ;
                }
                if( w<nwells-1 ){
                    populations[w+1] = populations[w+1] + r2 ;
                }
            }


            // Update time
            t = t + timestep ;
    

            if( steps%250 == 0 ){
                System.out.print( t );
                for( int w=0; w<nwells; w++ ){ System.out.print(" " + populations[w]); }
                System.out.println() ;

                long Ntot = 0;
                for( int w=0; w<nwells; w++ ){ Ntot += populations[w] ; }
                out.println(t + " " + Ntot);

                //// Check if wells are all full
                //boolean stop = true; 
                //long stop_value = K ;   // E.g. if this is K, stop simulation once all wells are full.
                //for( int i=0; i<nwells; i++ ){  if( populations[i] < stop_value ){stop =false;}     }
                //if( stop ){ steps = numsteps + 1 ; }
            }



        }   



    }



    out.close() ;


    
    }//end main   











}//end class
